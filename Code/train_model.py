import os
import cv2
import numpy as np
import sys

# ================================
# C·∫§U H√åNH ƒê∆Ø·ªúNG D·∫™N
# ================================
DATASET_PATH = "../Dataset"
MODEL_PATH = "../Model"
os.makedirs(MODEL_PATH, exist_ok=True)

# ================================
# B∆Ø·ªöC 1: KI·ªÇM TRA D·ªÆ LI·ªÜU
# ================================
if not os.path.exists(DATASET_PATH):
    print("‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c Dataset!")
    sys.exit()

subfolders = [d for d in os.listdir(DATASET_PATH) if os.path.isdir(os.path.join(DATASET_PATH, d))]
if len(subfolders) == 0:
    print("‚ùå Dataset tr·ªëng, ch∆∞a c√≥ d·ªØ li·ªáu khu√¥n m·∫∑t n√†o!")
    sys.exit()

# ================================
# B∆Ø·ªöC 2: ƒê·ªåC ·∫¢NH V√Ä G√ÅN NH√ÉN
# ================================
faces = []
labels = []
id_to_name = {}

print("‚ö° ƒêang t·∫£i d·ªØ li·ªáu khu√¥n m·∫∑t...")

for label_id, folder_name in enumerate(subfolders):
    folder_path = os.path.join(DATASET_PATH, folder_name)
    image_files = [f for f in os.listdir(folder_path) if f.lower().endswith(('.jpg', '.png', '.jpeg'))]

    if len(image_files) == 0:
        print(f"‚ö†Ô∏è B·ªè qua th∆∞ m·ª•c {folder_name}: kh√¥ng c√≥ ·∫£nh h·ª£p l·ªá.")
        continue

    id_to_name[label_id] = folder_name

    for img_name in image_files:
        img_path = os.path.join(folder_path, img_name)
        gray = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
        if gray is None:
            print(f"‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ·∫£nh: {img_path}")
            continue
        faces.append(gray)
        labels.append(label_id)

print(f"‚úÖ ƒê√£ n·∫°p {len(faces)} ·∫£nh t·ª´ {len(id_to_name)} ng∆∞·ªùi.")

# ================================
# B∆Ø·ªöC 3: KI·ªÇM TRA D·ªÆ LI·ªÜU TR∆Ø·ªöC KHI TRAIN
# ================================
if len(faces) == 0:
    print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ train!")
    sys.exit()

# ================================
# B∆Ø·ªöC 4: TRAIN MODEL LBPH
# ================================
print("üöÄ ƒêang train model LBPH...")

recognizer = cv2.face.LBPHFaceRecognizer_create()
recognizer.train(faces, np.array(labels))

# ================================
# B∆Ø·ªöC 5: L∆ØU MODEL V√Ä LABEL_MAP
# ================================
model_file = os.path.join(MODEL_PATH, "face_model.yml")
recognizer.save(model_file)

label_map_path = os.path.join(MODEL_PATH, "label_map.txt")
with open(label_map_path, "w", encoding="utf-8") as f:
    for idx, name in id_to_name.items():
        f.write(f"{idx}:{name}\n")

print("‚úÖ ƒê√£ l∆∞u model t·∫°i:", model_file)
print("‚úÖ ƒê√£ l∆∞u label map t·∫°i:", label_map_path)
print("üéâ Hu·∫•n luy·ªán ho√†n t·∫•t!")
