import tkinter as tk
from tkinter import messagebox
import cv2
import os
import numpy as np

# ‚úÖ Gi·∫£m c·∫£nh b√°o GStreamer khi m·ªü webcam
os.environ["OPENCV_VIDEOIO_PRIORITY_MSMF"] = "0"

# ‚úÖ ƒê∆∞·ªùng d·∫´n
XML_PATH = './'
DATASET_PATH = '../Dataset'
MODEL_PATH = '../Model'

# ‚úÖ T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
os.makedirs(DATASET_PATH, exist_ok=True)
os.makedirs(MODEL_PATH, exist_ok=True)


class RegisterFaceApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üöÄ ƒêƒÇNG K√ù KHU√îN M·∫∂T NH√ÇN VI√äN")
        self.root.geometry("500x400")
        self.root.resizable(False, False)

        # --- Load b·ªô ph√°t hi·ªán khu√¥n m·∫∑t ---
        self.detector = self.load_cascade()
        self.create_widgets()

    def load_cascade(self):
        """N·∫°p file Haar Cascade"""
        xml_path = os.path.join(XML_PATH, 'haarcascade_frontalface_default.xml')
        if os.path.exists(xml_path):
            detector = cv2.CascadeClassifier(xml_path)
            if not detector.empty():
                print("‚úÖ ƒê√£ t·∫£i b·ªô ph√°t hi·ªán khu√¥n m·∫∑t!")
                return detector
        print("‚ùå Kh√¥ng t√¨m th·∫•y file haarcascade_frontalface_default.xml!")
        return None

    def create_widgets(self):
        """Giao di·ªán ch√≠nh"""
        tk.Label(
            self.root, text="üì∏ ƒêƒÇNG K√ù KHU√îN M·∫∂T NH√ÇN VI√äN",
            font=("Arial", 16, "bold"), fg="blue"
        ).pack(pady=15)

        frame = tk.Frame(self.root)
        frame.pack(pady=20)

        tk.Label(frame, text="H·ªç t√™n:", font=("Arial", 12)).grid(row=0, column=0, padx=5, pady=5)
        self.name = tk.Entry(frame, width=30, font=("Arial", 12))
        self.name.grid(row=0, column=1, padx=5, pady=5)

        tk.Button(
            self.root, text="üé• B·∫ÆT ƒê·∫¶U CH·ª§P 30 ·∫¢NH",
            command=self.on_register, bg="#28a745", fg="white",
            font=("Arial", 12, "bold"), width=25, height=2
        ).pack(pady=15)

        tk.Label(
            self.root,
            text="Nh·∫•n 'Q' ƒë·ªÉ tho√°t khi ƒëang ch·ª•p.",
            fg="gray", font=("Arial", 10)
        ).pack(side="bottom", pady=10)

    def on_register(self):
        """X·ª≠ l√Ω khi nh·∫•n n√∫t ƒëƒÉng k√Ω"""
        name = self.name.get().strip()
        if not name:
            messagebox.showwarning("‚ö†Ô∏è C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p H·ªç t√™n!")
            return

        # --- Ghi nh√£n v√†o file label_map.txt ---
        label_map_path = os.path.join(MODEL_PATH, "label_map.txt")
        next_index = 0
        if os.path.exists(label_map_path):
            with open(label_map_path, "r", encoding="utf-8") as f:
                lines = [line.strip() for line in f if line.strip()]
                existing_names = [line.split(":", 1)[1] for line in lines if ":" in line]
                if name in existing_names:
                    messagebox.showinfo("‚ÑπÔ∏è Th√¥ng b√°o", f"T√™n {name} ƒë√£ c√≥ trong d·ªØ li·ªáu!")
                    return
                next_index = len(lines)

        with open(label_map_path, "a", encoding="utf-8") as f:
            f.write(f"{next_index}:{name}\n")

        self.capture_face(name)
        self.train_and_save_model()

    def capture_face(self, name):
        """Ch·ª•p v√† l∆∞u 30 ·∫£nh khu√¥n m·∫∑t theo t√™n th·∫≠t"""
        if self.detector is None or self.detector.empty():
            messagebox.showerror("‚ùå L·ªói", "Kh√¥ng t·∫£i ƒë∆∞·ª£c file XML Haar Cascade!")
            return

        emp_folder = os.path.join(DATASET_PATH, name)
        os.makedirs(emp_folder, exist_ok=True)

        cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
        if not cap.isOpened():
            messagebox.showerror("‚ùå L·ªói", "Kh√¥ng th·ªÉ m·ªü camera!")
            return

        count = 0
        print(f"üì∏ ƒêang ch·ª•p ·∫£nh cho {name}... (Nh·∫•n Q ƒë·ªÉ d·ª´ng)")

        while count < 30:
            ret, frame = cap.read()
            if not ret:
                break

            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            faces = self.detector.detectMultiScale(gray, 1.3, 5)

            if len(faces) > 0:
                (x, y, w, h) = faces[0]
                face_roi = cv2.resize(gray[y:y+h, x:x+w], (200, 200))
                cv2.imwrite(f"{emp_folder}/{count}.jpg", face_roi)
                count += 1

                cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
                cv2.putText(frame, f"{name} ({count}/30)", (30, 50),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            else:
                cv2.putText(frame, "üëÄ H√£y nh√¨n th·∫≥ng v√†o camera!", (30, 50),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)

            cv2.imshow("üöÄ CH·ª§P KHU√îN M·∫∂T", frame)
            if cv2.waitKey(100) & 0xFF == ord('q'):
                break

        cap.release()
        cv2.destroyAllWindows()
        print(f"‚úÖ Ho√†n t·∫•t ch·ª•p 30 ·∫£nh cho {name}!")

    def train_and_save_model(self):
        """Train LBPH model v√† l∆∞u"""
        print("‚ö° ƒêang train model LBPH...")

        recognizer = cv2.face.LBPHFaceRecognizer_create()
        faces = []
        labels = []

        # Load label_map
        label_map_path = os.path.join(MODEL_PATH, "label_map.txt")
        id_to_name = {}
        with open(label_map_path, "r", encoding="utf-8") as f:
            for line in f:
                idx, name = line.strip().split(":")
                id_to_name[int(idx)] = name

        # Load dataset theo t√™n th·∫≠t
        for idx, name in id_to_name.items():
            folder = os.path.join(DATASET_PATH, name)
            if not os.path.isdir(folder):
                continue
            for img_name in os.listdir(folder):
                img_path = os.path.join(folder, img_name)
                gray = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
                if gray is not None:
                    faces.append(gray)
                    labels.append(idx)

        if not faces:
            print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ train!")
            return

        recognizer.train(faces, np.array(labels))
        model_file = os.path.join(MODEL_PATH, "face_model.yml")
        recognizer.save(model_file)
        print(f"‚úÖ Model ƒë√£ l∆∞u t·∫°i {model_file}")


# --- Ch·∫°y ch∆∞∆°ng tr√¨nh ---
if __name__ == "__main__":
    root = tk.Tk()
    app = RegisterFaceApp(root)
    root.mainloop()
